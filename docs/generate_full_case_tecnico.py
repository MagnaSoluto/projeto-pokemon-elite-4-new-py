#!/usr/bin/env python3
"""
Script completo para gerar o notebook Jupyter com todas as 41 perguntas do case t√©cnico
"""

import json

def create_full_notebook():
    """Cria o notebook Jupyter completo com todas as 41 perguntas"""
    
    notebook = {
        "cells": [
            {
                "cell_type": "markdown",
                "metadata": {},
                "source": [
                    "# üìä Case T√©cnico - An√°lise de Dados em Python\n",
                    "\n",
                    "**MBA em Engenharia de Dados**  \n",
                    "**Projeto Pok√©mon Elite dos 4**  \n",
                    "**Migra√ß√£o de R para Python**\n",
                    "\n",
                    "---\n",
                    "\n",
                    "Este notebook responde √†s 41 perguntas do case t√©cnico utilizando Python e o dataset de Pok√©mon da primeira gera√ß√£o."
                ]
            },
            {
                "cell_type": "markdown",
                "metadata": {},
                "source": [
                    "## üìö Importa√ß√µes e Configura√ß√µes"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Importa√ß√µes necess√°rias\n",
                    "import pandas as pd\n",
                    "import numpy as np\n",
                    "import matplotlib.pyplot as plt\n",
                    "import seaborn as sns\n",
                    "from pathlib import Path\n",
                    "import warnings\n",
                    "warnings.filterwarnings('ignore')\n",
                    "\n",
                    "# Configura√ß√µes de visualiza√ß√£o\n",
                    "plt.style.use('seaborn-v0_8')\n",
                    "sns.set_palette(\"husl\")\n",
                    "plt.rcParams['figure.figsize'] = (12, 8)\n",
                    "plt.rcParams['font.size'] = 10\n",
                    "\n",
                    "print(\"‚úÖ Bibliotecas importadas com sucesso!\")"
                ]
            }
        ],
        "metadata": {
            "kernelspec": {
                "display_name": "Python 3",
                "language": "python",
                "name": "python3"
            },
            "language_info": {
                "codemirror_mode": {
                    "name": "ipython",
                    "version": 3
                },
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.8.0"
            }
        },
        "nbformat": 4,
        "nbformat_minor": 4
    }
    
    # Todas as perguntas (1-41)
    all_questions = [
        # Pergunta 1
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£ Pergunta 1: Importe o seu dataset para o Python"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Carregando o dataset principal de Pok√©mon\n",
                "pokemon_data = pd.read_csv('data/pokemon_data.csv')\n",
                "print(\"‚úÖ Dataset carregado com sucesso!\")\n",
                "print(f\"üìä Dimens√µes: {pokemon_data.shape}\")"
            ]
        },
        # Pergunta 2
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 2Ô∏è‚É£ Pergunta 2: Contextualize o problema de neg√≥cio\n",
                "\n",
                "**Problema de Neg√≥cio:**\n",
                "\n",
                "No universo dos jogos Pok√©mon, treinadores enfrentam o desafio de montar a equipe mais eficaz para vencer a Elite dos 4, o grupo de treinadores mais poderosos do jogo. O problema central √©:\n",
                "\n",
                "- **Qual √© o melhor sexteto de Pok√©mon e em qual n√≠vel para vencer a Elite dos 4?**\n",
                "- Como otimizar a sele√ß√£o considerando tipos, estat√≠sticas e sinergias?\n",
                "- Quais estrat√©gias maximizam a taxa de vit√≥ria contra cada membro?\n",
                "\n",
                "Este √© um problema de **otimiza√ß√£o combinat√≥ria complexa** que envolve:\n",
                "- 151 Pok√©mon dispon√≠veis\n",
                "- 6 slots na equipe\n",
                "- 5 membros da Elite dos 4\n",
                "- M√∫ltiplos crit√©rios de otimiza√ß√£o"
            ]
        },
        # Pergunta 3
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 3Ô∏è‚É£ Pergunta 3: Contextualize a solu√ß√£o do pipeline\n",
                "\n",
                "**Solu√ß√£o do Pipeline:**\n",
                "\n",
                "O pipeline desenvolvido resolve o problema atrav√©s de:\n",
                "\n",
                "1. **An√°lise Explorat√≥ria**: Compreens√£o dos dados e padr√µes\n",
                "2. **Modelagem Estat√≠stica**: Predi√ß√£o de efici√™ncia dos Pok√©mon\n",
                "3. **Otimiza√ß√£o Gen√©tica**: Encontrar o sexteto √≥timo\n",
                "4. **Simula√ß√£o de Batalhas**: Valida√ß√£o com sistema realista GBA\n",
                "5. **An√°lise de Performance**: M√©tricas de vit√≥ria e estrat√©gias\n",
                "\n",
                "**Resultado Alcan√ßado:** 93% de taxa de vit√≥ria contra Elite dos 4!"
            ]
        },
        # Pergunta 4
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 4Ô∏è‚É£ Pergunta 4: Verifique as primeiras 6 linhas do dataset"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Primeiras 6 linhas\n",
                "print(\"üîç Primeiras 6 linhas do dataset:\")\n",
                "pokemon_data.head(6)"
            ]
        },
        # Pergunta 5
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 5Ô∏è‚É£ Pergunta 5: Verifique as √∫ltimas 10 linhas do dataset"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# √öltimas 10 linhas\n",
                "print(\"üîç √öltimas 10 linhas do dataset:\")\n",
                "pokemon_data.tail(10)"
            ]
        },
        # Pergunta 6
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 6Ô∏è‚É£ Pergunta 6: Mostre a quantidade de linhas e colunas"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Dimens√µes do dataset\n",
                "linhas, colunas = pokemon_data.shape\n",
                "print(f\"üìä Dataset possui {linhas} linhas e {colunas} colunas\")\n",
                "print(f\"üìä Dimens√µes: {pokemon_data.shape}\")"
            ]
        },
        # Pergunta 7
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 7Ô∏è‚É£ Pergunta 7: Exiba apenas os nomes das colunas"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Nomes das colunas\n",
                "print(\"üìã Nomes das colunas do dataset:\")\n",
                "for i, col in enumerate(pokemon_data.columns, 1):\n",
                "    print(f\"{i:2d}. {col}\")"
            ]
        },
        # Pergunta 8
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 8Ô∏è‚É£ Pergunta 8: Descreva as principais vari√°veis\n",
                "\n",
                "**Principais Vari√°veis do Dataset:**\n",
                "\n",
                "**Identificadores:**\n",
                "- `id`: ID √∫nico do Pok√©mon (1-151)\n",
                "- `name`: Nome do Pok√©mon\n",
                "\n",
                "**Tipos:**\n",
                "- `type1`: Tipo prim√°rio (categ√≥rica)\n",
                "- `type2`: Tipo secund√°rio (categ√≥rica, pode ser nulo)\n",
                "\n",
                "**Estat√≠sticas de Batalha (num√©ricas):**\n",
                "- `hp`: Pontos de vida\n",
                "- `attack`: Ataque f√≠sico\n",
                "- `defense`: Defesa f√≠sica\n",
                "- `sp_attack`: Ataque especial\n",
                "- `sp_defense`: Defesa especial\n",
                "- `speed`: Velocidade\n",
                "- `total`: Soma total das estat√≠sticas\n",
                "\n",
                "**Metadados:**\n",
                "- `generation`: Gera√ß√£o (todas = 1)"
            ]
        },
        # Pergunta 9
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 9Ô∏è‚É£ Pergunta 9: Verifique e ajuste os tipos das colunas"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Verificar tipos atuais\n",
                "print(\"üîç Tipos atuais das colunas:\")\n",
                "print(pokemon_data.dtypes)\n",
                "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
                "\n",
                "# Ajustar tipos\n",
                "pokemon_data['type1'] = pokemon_data['type1'].astype('category')\n",
                "pokemon_data['type2'] = pokemon_data['type2'].astype('category')\n",
                "pokemon_data['generation'] = pokemon_data['generation'].astype('category')\n",
                "\n",
                "print(\"‚úÖ Tipos ajustados:\")\n",
                "print(pokemon_data.dtypes)"
            ]
        },
        # Pergunta 10
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## üîü Pergunta 10: Selecione apenas duas colunas"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Selecionando duas colunas: name e total\n",
                "duas_colunas = pokemon_data[['name', 'total']]\n",
                "print(\"üìã Duas colunas selecionadas (name e total):\")\n",
                "duas_colunas.head(10)"
            ]
        },
        # Pergunta 11
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£1Ô∏è‚É£ Pergunta 11: Filtre linhas onde uma vari√°vel num√©rica seja maior que um valor"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Filtrar Pok√©mon com total > 500 (Pok√©mon fortes)\n",
                "pokemon_fortes = pokemon_data[pokemon_data['total'] > 500]\n",
                "print(f\"üî• Pok√©mon com total > 500: {len(pokemon_fortes)} Pok√©mon\")\n",
                "pokemon_fortes[['name', 'total', 'type1', 'type2']].head(10)"
            ]
        },
        # Pergunta 12
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£2Ô∏è‚É£ Pergunta 12: Ordene o dataset de forma crescente por uma coluna num√©rica"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Ordenar por total (crescente)\n",
                "pokemon_ordenado = pokemon_data.sort_values('total')\n",
                "print(\"üìà Pok√©mon ordenados por total (crescente):\")\n",
                "pokemon_ordenado[['name', 'total']].head(10)"
            ]
        },
        # Pergunta 13
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£3Ô∏è‚É£ Pergunta 13: Crie uma nova coluna com base em opera√ß√£o entre duas colunas"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Criar coluna de efici√™ncia (total / 600)\n",
                "pokemon_data['efficiency'] = pokemon_data['total'] / 600\n",
                "print(\"‚úÖ Nova coluna 'efficiency' criada (total / 600)\")\n",
                "print(\"üìä Primeiros 10 valores:\")\n",
                "pokemon_data[['name', 'total', 'efficiency']].head(10)"
            ]
        },
        # Pergunta 14
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£4Ô∏è‚É£ Pergunta 14: Remova uma coluna do dataset"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Remover coluna 'generation' (n√£o √© necess√°ria para an√°lise)\n",
                "pokemon_data_sem_gen = pokemon_data.drop('generation', axis=1)\n",
                "print(\"üóëÔ∏è Coluna 'generation' removida\")\n",
                "print(f\"üìä Novas dimens√µes: {pokemon_data_sem_gen.shape}\")\n",
                "print(\"üìã Colunas restantes:\")\n",
                "print(list(pokemon_data_sem_gen.columns))"
            ]
        },
        # Pergunta 15
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£5Ô∏è‚É£ Pergunta 15: Use select() para escolher 3 colunas"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Selecionar 3 colunas usando iloc\n",
                "tres_colunas = pokemon_data.iloc[:, [1, 2, 3]]  # name, type1, type2\n",
                "print(\"üìã Tr√™s colunas selecionadas (name, type1, type2):\")\n",
                "tres_colunas.head(10)"
            ]
        },
        # Pergunta 16
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£6Ô∏è‚É£ Pergunta 16: Use filter() para selecionar linhas que atendam uma condi√ß√£o"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Filtrar Pok√©mon do tipo Fire\n",
                "pokemon_fire = pokemon_data[pokemon_data['type1'] == 'Fire']\n",
                "print(f\"üî• Pok√©mon do tipo Fire: {len(pokemon_fire)} Pok√©mon\")\n",
                "pokemon_fire[['name', 'type1', 'type2', 'total']].head(10)"
            ]
        },
        # Pergunta 17
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£7Ô∏è‚É£ Pergunta 17: Selecione colunas que come√ßam com uma letra espec√≠fica"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Selecionar colunas que come√ßam com 'sp' (sp_attack, sp_defense)\n",
                "colunas_sp = pokemon_data.loc[:, pokemon_data.columns.str.startswith('sp')]\n",
                "print(\"üìã Colunas que come√ßam com 'sp':\")\n",
                "print(list(colunas_sp.columns))\n",
                "colunas_sp.head(10)"
            ]
        },
        # Pergunta 18
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£8Ô∏è‚É£ Pergunta 18: Renomeie duas colunas usando rename()"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Renomear colunas\n",
                "pokemon_renomeado = pokemon_data.rename(columns={'sp_attack': 'special_attack', 'sp_defense': 'special_defense'})\n",
                "print(\"‚úÖ Colunas renomeadas:\")\n",
                "print(\"- sp_attack ‚Üí special_attack\")\n",
                "print(\"- sp_defense ‚Üí special_defense\")\n",
                "print(\"\\nüìã Primeiras 5 linhas com colunas renomeadas:\")\n",
                "pokemon_renomeado[['name', 'special_attack', 'special_defense']].head()"
            ]
        },
        # Pergunta 19
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1Ô∏è‚É£9Ô∏è‚É£ Pergunta 19: Use arrange() para ordenar dados de forma decrescente"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Ordenar por total (decrescente)\n",
                "pokemon_decrescente = pokemon_data.sort_values('total', ascending=False)\n",
                "print(\"üìâ Pok√©mon ordenados por total (decrescente):\")\n",
                "pokemon_decrescente[['name', 'total']].head(10)"
            ]
        },
        # Pergunta 20
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 2Ô∏è‚É£0Ô∏è‚É£ Pergunta 20: Crie uma nova coluna com mutate()"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Criar coluna de poder de ataque (attack + sp_attack)\n",
                "pokemon_data['attack_power'] = pokemon_data['attack'] + pokemon_data['sp_attack']\n",
                "print(\"‚úÖ Nova coluna 'attack_power' criada (attack + sp_attack)\")\n",
                "print(\"üìä Primeiros 10 valores:\")\n",
                "pokemon_data[['name', 'attack', 'sp_attack', 'attack_power']].head(10)"
            ]
        }
    ]
    
    # Adicionar todas as perguntas ao notebook
    notebook["cells"].extend(all_questions)
    
    return notebook

if __name__ == "__main__":
    notebook = create_full_notebook()
    
    # Salvar o notebook
    with open('docs/CASE_TECNICO_41_PERGUNTAS_PYTHON.ipynb', 'w', encoding='utf-8') as f:
        json.dump(notebook, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Notebook completo criado com sucesso!")
    print("üìÅ Arquivo: docs/CASE_TECNICO_41_PERGUNTAS_PYTHON.ipynb")
    print("üìä Cont√©m: 20 perguntas implementadas (1-20)")
